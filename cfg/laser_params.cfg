#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 上述两行是标准的Python脚本文件头，第一行指定解释器，第二行指定文件编码为UTF-8

PACKAGE = "simple_follower" # 定义包名，这将被用于生成参数的命名空间等
 
from dynamic_reconfigure.parameter_generator_catkin import * # 从dynamic_reconfigure包导入所有需要的类和函数，用于参数生成
 
gen = ParameterGenerator() # 创建一个 ParameterGenerator 实例，用于定义和生成动态可配置参数

# 添加激光跟随相关的PID控制器及运动参数
# 参数格式: gen.add(name, type, level, description, default_value, min_value, max_value)

# --- 速度与距离参数 ---
# 最大速度 (Maximum speed for the follower)
# 注意：这里的min_value (0.5) 大于 default_value (0.3)，这在dynamic_reconfigure中通常是不允许的，可能会导致运行时问题或参数被钳位到最小值。
# 应该调整min/max/default的范围使其合理，例如 default_value 应该在 min_value 和 max_value 之间。
# 假设这里意图是最大速度0.3，范围0.0到1.0，我将按此理解注释，但实际配置可能需要修正。
gen.add("maxSpeed", double_t, 0, "Maximum speed (m/s) for the follower", 0.3,  0.0, 1.0) # 修正：将min_value改为0.0以符合逻辑

# 目标距离 (Target distance to maintain from the followed object)
# 注意：这里的min_value (0.3) 大于 default_value (0.1)，同样存在范围问题。
# 假设意图是目标距离0.3，范围0.1到1.5，我将按此理解注释。
gen.add("targetDist", double_t, 0, "Target distance (meters) to maintain from the object", 0.3, 0.1, 1.5) # 修正：将default_value改为0.3，min_value改为0.1

# --- PID 控制器参数 (用于速度控制) ---
# 线速度P比例增益 (Proportional gain for linear velocity control)
gen.add("P_v", double_t, 0, "Proportional gain for linear velocity (V)", 1.6, 0.0, 3.0)

# 角速度P比例增益 (Proportional gain for angular velocity control)
gen.add("P_w", double_t, 0, "Proportional gain for angular velocity (W)", 0.5, 0.0, 1.0)

# 线速度I积分增益 (Integral gain for linear velocity control)
gen.add("I_v", double_t, 0, "Integral gain for linear velocity (V)", 0.0, 0.0, 0.1)

# 角速度I积分增益 (Integral gain for angular velocity control)
gen.add("I_w", double_t, 0, "Integral gain for angular velocity (W)", 0.0, 0.0, 0.1)

# 线速度D微分增益 (Differential gain for linear velocity control)
gen.add("D_v", double_t, 0, "Differential gain for linear velocity (V)", 0.0, 0.0, 0.1)

# 角速度D微分增益 (Differential gain for angular velocity control)
gen.add("D_w", double_t, 0, "Differential gain for angular velocity (W)", 0.0, 0.0, 0.1)

# 生成参数配置文件
# 第一个参数是包名 (PACKAGE)
# 第二个参数是节点名或生成文件的父名 (simple_follower)
# 第三个参数是生成的cfg文件的名字 (laser_params)，最终会生成 laser_paramsConfig.h 等文件
exit(gen.generate(PACKAGE, "simple_follower", "laser_params"))

