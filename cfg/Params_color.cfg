#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 上述两行是标准的Python脚本文件头，第一行指定解释器，第二行指定文件编码为UTF-8

PACKAGE = "simple_follower" # 定义包名，这将被用于生成参数的命名空间等

from dynamic_reconfigure.parameter_generator_catkin import * # 从dynamic_reconfigure包导入所有需要的类和函数，用于参数生成

# 创建一个 ParameterGenerator 实例，通常变量名用 gen 或者 pg，这里用了 vfp (Vision Follower Params?)
gen = ParameterGenerator() # 将 vfp 改为 gen 以保持一致性，如果原始代码中其他地方也用vfp，则应保持vfp

# 定义一个枚举类型，用于选择颜色预设或动态阈值
# vfp.enum([list of constants], description of enum)
# vfp.const(name, type, value, description)
color_enum = gen.enum([	gen.const("Dynamic",int_t, 0, "Use dynamic threshold (manual HSV sliders will be active)"), # 动态阈值选项，此时手动调节HSV滑块生效
						gen.const("Red",	int_t, 1, "Preset HSV threshold for Red color detection"), # 红色预设HSV阈值
						gen.const("Blue",	int_t, 2, "Preset HSV threshold for Blue color detection"), # 蓝色预设HSV阈值
						gen.const("Green",	int_t, 3, "Preset HSV threshold for Green color detection"), # 绿色预设HSV阈值
						gen.const("Yellow",	int_t, 4, "Preset HSV threshold for Yellow color detection")], # 黄色预设HSV阈值
						"List of preset HSV thresholds for color detection or dynamic adjustment") # 枚举类型的描述

# 添加颜色选择参数，使用上面定义的枚举类型作为编辑方法
# gen.add(name, type, level, description, default_value, min_value, max_value, edit_method=enum_variable)
gen.add("color",int_t,0,"Choose a preset HSV threshold or dynamic adjustment",0,0,4,edit_method=color_enum)

# --- HSV 颜色空间阈值参数 (用于动态调节或作为 "Dynamic" 模式下的初始值) ---
# 这些参数定义了在HSV颜色空间中用于颜色检测的H(色相), S(饱和度), V(明度)的最小和最大值。
# H: 0-180 (在OpenCV中通常是这个范围)
# S: 0-255
# V: 0-255

# 当前激活的参数组 (可能对应 AstraS 相机或其他默认配置)
# H (Hue) 最小值
gen.add("HSV_H_MIN", int_t, 0, "Minimum Hue value (0-180) for color detection", 0, 0, 180)
# S (Saturation) 最小值
gen.add("HSV_S_MIN", int_t, 0, "Minimum Saturation value (0-255) for color detection", 60, 0, 255)
# V (Value/Brightness) 最小值
gen.add("HSV_V_MIN", int_t, 0, "Minimum Value/Brightness value (0-255) for color detection", 60,	0, 255)
# H (Hue) 最大值
gen.add("HSV_H_MAX", int_t, 0, "Maximum Hue value (0-180) for color detection", 180, 0, 180)
# S (Saturation) 最大值
gen.add("HSV_S_MAX", int_t, 0, "Maximum Saturation value (0-255) for color detection", 255, 0, 255)
# V (Value/Brightness) 最大值
gen.add("HSV_V_MAX", int_t, 0, "Maximum Value/Brightness value (0-255) for color detection", 255, 0, 255)

# --- 被注释掉的参数组 (可能对应 AstraPro 相机或其他备用配置) ---
# 如果需要使用这组参数，需要取消注释，并可能需要注释掉上面的 "AstraS" 参数组，以避免参数名冲突。
# vfp.add("HSV_H_MIN", int_t, 0, "HSV_H_MIN", 0, 0, 180)
# vfp.add("HSV_S_MIN", int_t, 0, "HSV_S_MIN", 110, 0, 255)
# vfp.add("HSV_V_MIN", int_t, 0, "HSV_V_MIN", 90,	0, 255)
# vfp.add("HSV_H_MAX", int_t, 0, "HSV_H_MAX", 19, 0, 180)
# vfp.add("HSV_S_MAX", int_t, 0, "HSV_S_MAX", 255, 0, 255)
# vfp.add("HSV_V_MAX", int_t, 0, "HSV_V_MAX", 255, 0, 255)

# 生成参数配置文件
# 第一个参数是包名 (PACKAGE)
# 第二个参数是节点名或生成文件的父名 (simple_follower)
# 第三个参数是生成的cfg文件的名字 (Params_color)，最终会生成 Params_colorConfig.h 等文件
exit(gen.generate(PACKAGE, "simple_follower", "Params_color"))

